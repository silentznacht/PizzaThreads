
#       Engineering Log


Functionality:
    - Allows user to choose their preferred pizza
            - Size
            - Toppings
            - += 1 Extra option later

    - Generates Receipt for user after program is done


Code Structure & Purpose

Notes:
    - will implement threads to create quicker response and simplified movement in source control
        - menu class (show toppings &  size) threads
            - 

PizzaThreads
│
├───DevLog
│   └───log
├───lib
│   └───PizzaThreads (App Name)
└───src
    ├───com 
    │   └───pizzathreads (source app name)
    │       ├───main (main source container for app code)
    │       │   ├───controller (controls/handles user input)
    |       |   |   |───Input.java (global input shared along all classes [this is a util class])
    │       │   │   └───Manager.java (manages all requests and input)
    │       │   └───menu (displays menu and prices to user) / (will be later for receipt amount)
    │       │       ├───prices 
    │       │       │   ├───Sizes.java (pizza size names and prices)
    │       │       │   ├───Toppings.java (topping names and prices)
    │       │       │   ├───ShowSizes.java (display pizza sizes)
    │       │       │   └───ShowToppings.java (display pizza topping names)
    |       |───questions
    |       |       |───FrankQ.java (Stores all possible responses and questions frank [pizza owner] may store)
    |       |───resources (json file for getting data)
    |       |       |───pom.xml (dependency used to allow other classes to save inputted data )
    │       │       └───output.json(all viable inputs outputted in this file)
    |       |───savedconverter(stores all saved inputs from other files, which will be later sent to output.json)    
    │       ├───services (contains business logic [more implemented soon])
    |       |       |───orders (handles user request)
    |       |       |     ├─── SizeOrder.java (user inputs pizza size here) 
    |       |       |     └─── ToppingsOrder.java (user inputs toppings here)
    |       ├───receipt (Adds all/Final Balance & detailed description of all orders => printing receipt)         
    |       |       |─── SizesBalance.java (results total balance of all sizes confirmed by user)
    |       |       |─── ToppingsBalance.java (results total balance of all toppings confirmed by user)
    |       |       └─── FinalBalance.java (results in all balances put together by user, and prints out specific details)
    │       └───tests (Test code for fluency and efficiency)
    │       |   └───ToppingsOrder.java
    |       └─── App.java (Main Application)
    └───...


Issues/Questions & Possible implementations

    - 1. How will the user be able to request multiple pizzas?
        - 
    - 2. How will manager be able to control different inputs if threads are involved?
        - could use a scanner class solely from one class, then implement it as sole input in all classes

Converter saved code (test)

import com.fasterxml.jackson.databind.ObjectMapper;

public class Data {
    private String name;
    private int age;

    // Constructors, getters, and setters

    public static void main(String[] args) {
        // Create an instance of your data class
        Data data = new Data("John", 25);

        // Convert to JSON
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            objectMapper.writeValue(new File("output.json"), data);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

Idea:
    all desired classes will have a specific input set to match desired data